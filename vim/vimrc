set shell=/bin/zsh
set encoding=utf-8
set fileencoding=utf-8
set number                      " Display line numbers beside buffer
set nocompatible                " Don't maintain compatibilty with Vi.
filetype off                    " required for vundle
set hidden                      " Allow buffer change w/o saving
set lazyredraw                  " Don't update while executing macros
set backspace=indent,eol,start  " Sane backspace behavior
set history=1000                " Remember last 1000 commands
set scrolloff=4                 " Keep at least 4 lines below cursor
set incsearch
set hlsearch                    " highlight matches
set ignorecase
set smartcase
set showcmd                     " display incomplete commands
set relativenumber
set nobackup
set nowritebackup
set breakindent
set noswapfile
set expandtab
set shiftwidth=2
set softtabstop=2
set smartindent

:hi CursorLine   cterm=NONE ctermbg=darkred ctermfg=white guibg=darkred guifg=white
:hi CursorColumn cterm=NONE ctermbg=darkred ctermfg=white guibg=darkred guifg=white

set winwidth=84
set winheight=5
set winminheight=5
set winheight=999

nmap 0 ^

" Move up and down by visible lines if current line is wrapped
nmap j gj
nmap k gk

imap <up> <nop>
imap <down> <nop>
imap <left> <nop>
imap <right> <nop>
map <up> <nop>
map <down> <nop>
map <left> <nop>
map <right> <nop>

imap jk <esc>:w<cr>
imap kj <esc>:w<cr>

let mapleader = "\<Space>"
nmap <leader>vi :tabedit ~/.vimrc<cr>
nmap <leader>so :source $MYVIMRC<cr>

"save & quit
map <leader>w :w<cr>
map <leader>q :q<cr>
map <leader>wq :w<cr>:q<cr>
map <leader>Q :on<cr>

" wrapping and highlight
map <leader>no :let @/ = ""<cr>
map <leader>yw :set wrap<cr>
map <leader>nw :set nowrap<cr>

" pry
map <leader>pr obinding.pry<esc>==
map <leader>pR Obinding.pry<esc>==
map <leader>Pr orequire 'pry'; binding.pry<esc>==
map <leader>PR Orequire 'pry'; binding.pry<esc>==

" Copy the entire buffer into the system register
nmap <leader>co ggVG*y

" navigating between tabs
map <leader>tp gT
map <leader>tn gt

" vtr
map <leader>ra :VtrAttachToPane<cr>
map <leader>rz :VtrFocusRunner<cr>
map <leader>ro :VtrOpenRunner<cr>
map <leader>rx :VtrKillRunner<cr>
map <leader>rl :VtrClearRunner<cr>
map <leader>rs :VtrSendCommandToRunner 
map <leader>rd :VtrSendCtrlD<cr>
map <leader>sc :VtrSendCommandToRunner<cr>
map <leader>sv :VtrSendLinesToRunner<cr>

" NERDTree
map <leader>nt :NERDTreeToggle<cr>

" GitGutter
map <leader>gi :GitGutterToggle<cr>
map <leader>gb :Gblame<cr>

map <leader>sm :smile<cr>

" RSpec.vim mappings
let g:rspec_command = "call VtrSendCommand('rspec {spec}')"
map <Leader>tf :call RunCurrentSpecFile()<CR>
map <Leader>tF :call RunCurrentSpecFile()<CR>:VtrFocusRunner<cr>
map <Leader>ts :call RunNearestSpec()<CR>
map <Leader>tS :call RunNearestSpec()<CR>:VtrFocusRunner<cr>
map <Leader>tp :call RunLastSpec()<CR>
map <Leader>tP :call RunLastSpec()<CR>:VtrFocusRunner<cr>
map <Leader>ta :call RunAllSpecs()<CR>
map <Leader>tA :call RunAllSpecs()<CR>:VtrFocusRunner<cr>

" copy mode
map <Leader>y :set invnumber<CR>:set invrelativenumber<CR>:GitGutterToggle<CR>

" change quote
map <leader>' F'cs'"

" Pre-populate a split command with the current directory
nmap <leader>v :vnew <C-r>=escape(expand("%:p:h"), ' ') . '/'<cr>

" html 5 tags
syn keyword htmlTagName contained article aside main audio canvas command datalist
syn keyword htmlTagName contained details embed figcaption figure footer header
syn keyword htmlTagName contained hgroup keygen mark meter nav output progress
syn keyword htmlTagName contained rp rt ruby section source summary time video

" flexbox tags
syn keyword cssFontProp order
syn match cssFontProp contained "\<flex\(-\(basis\|direction\|flow\|grow\|shrink\|wrap\)\)\=\>"
syn keyword cssFontAttr contained flex row wrap
syn match cssFontAttr contained "\<inline-flex\>"
syn match cssFontAttr contained "\<\(row\|column\|wrap\)-reverse\>"

" Start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga <Plug>(EasyAlign)
" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)

" Substitution
nnoremap <leader>sub :%s///g<left><left>
vnoremap <leader>sub :s///g<left><left>

let g:closetag_filenames = '*.html,*.xhtml,*.phtml,*.js,*.jsx'
let g:closetag_xhtml_filenames = '*.js,*.xhtml,*.jsx'
let g:closetag_emptyTags_caseSensitive = 1
let g:closetag_shortcut = '>'
let g:closetag_shortcut = '>'

nnoremap <leader>e :Emmet 

if has('nvim')
  let g:loaded_sensible=0
endif

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'
Plugin 'tpope/vim-surround'
Plugin 'tpope/vim-repeat'
Plugin 'tpope/vim-commentary'
Plugin 'tpope/vim-fugitive'
Plugin 'tpope/vim-sensible'
Plugin 'tpope/vim-endwise'
Plugin 'tpope/vim-bundler'
Plugin 'tpope/vim-haml'
Plugin 'tpope/vim-ragtag'
Plugin 'tpope/vim-eunuch'
Plugin 'tpope/rbenv-ctags'
Plugin 'vim-ruby/vim-ruby'
Plugin 'tpope/vim-rake'
Plugin 'tpope/vim-rails'
Plugin 'tpope/vim-unimpaired'
Plugin 'ctrlpvim/ctrlp.vim'
Plugin 'christoomey/vim-tmux-navigator'
Plugin 'christoomey/vim-tmux-runner'
Plugin 'vim-scripts/ReplaceWithRegister'
Plugin 'benmills/vimux'
Plugin 'jgdavey/vim-blockle'
Plugin 'skalnik/vim-vroom'
Plugin 'nathanaelkane/vim-indent-guides'
Plugin 'bling/vim-airline'
Plugin 'pbrisbin/vim-mkdir'
Plugin 'alvan/vim-closetag'
Plugin 'thoughtbot/vim-rspec'
Plugin 'rking/ag.vim'
Plugin 'tmhedberg/matchit'
Plugin 'mattn/emmet-vim'
Plugin 'hail2u/vim-css3-syntax'
Plugin 'pangloss/vim-javascript'
Plugin 'MaxMEllon/vim-jsx-pretty'
Plugin 'kana/vim-textobj-user'
Plugin 'rhysd/vim-textobj-ruby'
Plugin 'ecomba/vim-ruby-refactoring'
Plugin 'sickill/vim-pasta'
Plugin 'scrooloose/syntastic'
Plugin 'elixir-lang/vim-elixir'
Plugin 'scrooloose/nerdtree'
Plugin 'easymotion/vim-easymotion'
Plugin 'airblade/vim-gitgutter'
Plugin 'wellle/targets.vim'
Plugin 'godlygeek/tabular'
Plugin 'junegunn/vim-easy-align'

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required

" Make CtrlP use ag for listing the files. Way faster and no useless files.
let g:ctrlp_user_command = 'ag %s -l --hidden --nocolor -g ""'
let g:ctrlp_use_caching = 0
